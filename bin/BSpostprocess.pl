#!/usr/bin/perl
use Getopt::Long;
use File::Basename;
use Data::Dumper;
use FindBin qw($Bin);


GetOptions (\%opt,"ref:s","chr:s","step:s","header:s","sam:s","project:s","help");


my $help=<<USAGE;
perl $0 --sam ./ --step 1
Merge sam files generated by bismark and do postprocess of Bisulfite reads.
--sam: dir of sam files
--ref: genome directory
--chr: chromosome inf, chr\tlength
--header: sam header file
--step: step to do, 1 merge sam files, 2 do rmduplication, 3 do postprocess
USAGE


if ($opt{help} or keys %opt < 1){
    print "$help\n";
    exit();
}

$opt{ref}     ||="/rhome/cjinfeng/BigData/04.Epigenome/input/epiRICE/Methylation/reference";
$opt{chr}     ||="/rhome/cjinfeng/HEG4_cjinfeng/seqlib/MSU7.chrlen";
$opt{project} ||= "Rice.MSU7.BSseq";
$opt{header}  ||= "MSU7.sam.header"; #### run a test with bismark for the header
my $bismark="/rhome/cjinfeng/software/tools/bismark_v0.8.3";
my $SAMtool="/usr/local/bin/samtools";
my $rmdup="/opt/picard/1.81/MarkDuplicates.jar";
my $JAVA="/opt/java/jdk1.6.0_38/bin/java";
my $bed2wig="/rhome/cjinfeng/software/Shell/bedGraph2bigwig.sh";
#######Step 1###############################################
if ($opt{step}=~/1/){
   print "Merging Sam files ......\n";
   if (-e "$opt{project}.sam"){
      print "Sam file $opt{project}.sam already exists!\n";
      exit();
   }
   my @sam=glob("*.sam");
   `cp $opt{header} $opt{project}.sam`;
   for(my $i=0;$i<@sam;$i++){
      `cat $sam[$i] >> $opt{project}.sam`;
   }
   print "Done\n";
}

#######Step 2##############################################
if ($opt{step}=~/2/){
   print "Sort and Remove PCR duplicates ......\n";
   if (-e "$opt{project}.bam"){
      print "bam file $opt{project}.bam already exists!\n";
      exit()
   }
   print "SAM 2 BAM!\n";
   `$SAMtool view -bS -o $opt{project}.raw.bam $opt{project}.sam > $opt{project}.convert.log 2> $opt{project}.convert.log2`;
   print "Sort Bam!\n";
   `$SAMtool sort $opt{project}.raw.bam $opt{project}.sort > $opt{project}.sort.log 2> $opt{project}.sort.log2`;
   print "Remove duplicate!\n";
   `$JAVA -Xmx8g -jar $rmdup ASSUME_SORTED=TRUE REMOVE_DUPLICATES=TRUE VALIDATION_STRINGENCY=LENIENT INPUT=$opt{project}.sort.bam OUTPUT=$opt{project}.bam METRICS_FILE=$opt{project}.dupli > $opt{project}.rmdup.log 2> $opt{project}.rmdup.log2`;    
}

#######Step 3#############################################
if ($opt{step}=~/3/){
   print "Extract methylation status ......\m";
   `mkdir $opt{project}_bismark_results`;
   `$bismark/bismark_methylation_extractor $opt{project}.bam --output $opt{project}_bismark_results --samtools_path /usr/local/bin/ --single-end --bedGraph --counts --CX --buffer_size 10G` unless (-e "$opt{project}_bismark_results/CpG_OT_$opt{project}.txt");
   `sh $bed2wig $opt{project}_bismark_results/$opt{project}.bedGraph $opt{chr} $opt{project}_bismark_results/$opt{project}.bw` unless (-e "$opt{project}_bismark_results/$opt{project}.bw");
   `$bismark/bedGraph2cytosine --CX --zero_based  --genome_folder $opt{ref} --dir $opt{project}_bismark_results --output $opt{project}.genome.report $opt{project}.bedGraph` unless (-e "$opt{project}_bismark_results/$opt{project}.genome.report");
   print "Done\n";
}


###########################################################
sub readtable
{
my ($file)=@_;
my %hash;
open IN, "$file" or die "$!";
while(<IN>){
    chomp $_;
    next if ($_=~/^$/);
    my @unit=split("\t",$_);
    $hash{$unit[0]}=1;
}
close IN;
return \%hash;
}
 
